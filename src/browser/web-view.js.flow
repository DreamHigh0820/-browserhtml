/* @flow */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import {Effects} from "reflex"
import type {Address, DOM} from "reflex"
import type {ID, URI, Time, Float} from "../common/prelude"
import * as Shell from "./web-view/shell"
import * as Progress from "./web-view/progress"
import * as Navigation from "./web-view/navigation"
import * as Security from "./web-view/security"
import * as Page from "./web-view/page"
import * as Stopwatch from "../common/stopwatch"
import * as Sidebar from "./sidebar/tab"
import * as Tab from './sidebar/tab';

export type {ID, URI, Time}

export type Display =
  { opacity: Float
  }

export type Options =
  { uri: URI
  , inBackground: boolean
  , name: string
  , features: string
  , frameElement?: any
  }

export type Model =
  { id: ID
  , name: string
  , features: string
  , isSelected: boolean
  , isActive: boolean
  , display: Display

  , tab: Tab.Model
  , shell: Shell.Model
  , navigation: Navigation.Model
  , security: Security.Model
  , page: Page.Model
  , progress: Progress.Model
  , animation: Stopwatch.Model
  }

export type Action =
  | { type: "Select" }
  | { type: "Selected" }
  | { type: "Unselect" }
  | { type: "Unselected" }
  | { type: "Activate" }
  | { type: "Activated" }
  | { type: "Deactivate" }
  | { type: "Deactivated" }
  | { type: "Focus" }
  | { type: "Load"
    , uri: URI
    }
  | { type: "LoadStart"
    , time: Time
    }
  | { type: "LoadEnd"
    , time: Time
    }
  | { type: "Connect"
    , time: Time
    }
  | { type: "LocationChanged"
    , uri: URI
    , canGoBack: boolean
    , canGoForward: boolean
    , time: Time
    }
  | { type: "Close" }
  | { type: "Closed" }
  | { type: "Edit" }
  | { type: "ShowTabs" }
  | { type: "Create" }
  | { type: "SelectAnimation"
    , action: Stopwatch.Action
    }
  | { type: "Progress"
    , action: Progress.Action
    }
  | { type: "Shell"
    , shell: Shell.Action
    }
  | { type: "Page"
    , action: Page.Action
    }
  | { type: "Tab"
    , source: Tab.Action
    }
  | { type: "Security"
    , action: Security.Action
    }
  | { type: "Navigation"
    , navigation: Navigation.Action
    }
  | { type: "Open!WithMyIFrameAndInTheCurrentTick"
    , options: Options
    , isForced: true
    }
  | { type: "ContextMenu"
    , detail: any
    }
  | { type: "Authentificate"
    , detail: any
    }
  | { type: "Error"
    , detail: any
    }
  | { type: "ModalPrompt"
    , detail: any
    }


declare export var Select:Action
declare export var Unselect:Action
declare export var Selected:Action
declare export var Unselected:Action
declare export var Activate:Action
declare export var Activated:Action
declare export var Deactivate:Action
declare export var Deactivated:Action
declare export var Close:Action
declare export var Closed:Action
declare export var Edit:Action
declare export var ShowTabs:Action
declare export var Create:Action
declare export var Focus:Action
declare export var ZoomIn:Action
declare export var ZoomOut:Action
declare export var ResetZoom:Action
declare export var MakeVisible:Action
declare export var MakeNotVisible:Action
declare export var Stop:Action
declare export var Reload:Action
declare export var GoBack:Action
declare export var GoForward:Action

declare export function Load
 (uri:URI):
  Action

declare export function LoadStart
  (time:Time):
  Action

declare export function LoadEnd
  (time:Time):
  Action

declare export function LocationChanged
 (uri:URI, time:Time):
  Action


declare export function OpenSyncWithMyIFrame
  (options:Options):
  Action

declare export function ModalPrompt
  (detail:any):
  Action

declare export function ContextMenu
  (detail:any):
  Action

declare export function ReportError
  (detail:any):
  Action

declare export function Authentificate
  (detail:any):
  Action

declare export function init
  (id:ID, options:Options):
  [Model, Effects<Action>]

declare export function update
  (model:Model, action:Action):
  [Model, Effects<Action>]

declare export function view
  (model:Model, address:Address<Action>):
  DOM
